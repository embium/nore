/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** Configuration for starting an MCP server */
export interface ServerConfig {
  /** Unique identifier for the server */
  id: string
  /** Command to execute (path to the server executable) */
  command: string
  /** Arguments to pass to the command */
  args: Array<string>
  /** Environment variables to pass to the command */
  env?: Record<string, string>
}
/** Information about a tool provided by an MCP server */
export interface ToolInfo {
  /** ID of the server that provides this tool */
  serverId: string
  /** Name of the tool */
  toolName: string
  /** Description of the tool */
  description: string
  /** Parameters accepted by the tool (as a JSON string) */
  parameters: string
}
/** Request to execute a tool on an MCP server */
export interface ToolExecutionRequest {
  /** ID of the server to execute the tool on */
  serverId: string
  /** Name of the tool to execute */
  toolName: string
  /** Input parameters for the tool (as a JSON string) */
  inputs: string
}
/** Event emitted by the MCP manager */
export interface McpEvent {
  /** Type of event */
  eventType: string
  /** Event payload (as a JSON string) */
  payload: string
}
/** Log event emitted by the MCP manager */
export interface LogEvent {
  /** Log level */
  level: string
  /** Log message */
  message: string
  /** Server ID (if applicable) */
  serverId?: string
}
/** Tools updated event emitted by the MCP manager */
export interface ToolsUpdatedEvent {
  /** List of available tools */
  tools: Array<ToolInfo>
}
export type McpManagerWrapper = McpManager
/** NAPI wrapper for the MCP manager */
export declare class McpManager {
  /** Create a new MCP manager wrapper */
  constructor(managerId: string, eventCallback: (err: Error | null, arg: McpEvent) => any)
  /** Start a new MCP server */
  start(config: ServerConfig): Promise<void>
  /** Stop an MCP server */
  stop(serverId: string): Promise<void>
  /** Get all available tools across all servers */
  getTools(): Array<ToolInfo>
  /** Execute a tool on an MCP server */
  executeTool(request: ToolExecutionRequest): Promise<string>
  /** Get the manager ID */
  getManagerId(): string
  /** Get the current working directory of the Rust library */
  getCurrentDir(): string
}
export declare namespace error_codes {
  export const SERVER_NOT_FOUND: string
  export const TOOL_NOT_FOUND: string
  export const PROCESS_START_ERROR: string
  export const PROCESS_STOP_ERROR: string
  export const COMMUNICATION_ERROR: string
  export const TOOL_EXECUTION_ERROR: string
  export const MANAGER_NOT_FOUND: string
  export const MANAGER_SHUTDOWN: string
  export const MCP_ERROR: string
  export const UNKNOWN_ERROR: string
}
